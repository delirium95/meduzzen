from fastapi import FastAPI, Depends, HTTPException, status, UploadFile, File, Form
from fastapi.security import OAuth2PasswordRequestForm, HTTPBearer
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from sqlalchemy.orm import Session
from database import get_db, engine, SessionLocal
from models import UserCreate, UserResponse, UserLogin, User, Token, ChatCreate, ChatResponse, MessageCreate, MessageResponse
from auth import create_access_token, get_current_active_user, add_token_to_blacklist
from chat_operations import (
    create_private_chat, get_or_create_private_chat, send_message, edit_message, 
    delete_message, upload_file, get_chat_messages, get_user_chats, 
    get_chat_participants, is_user_in_chat
)
from datetime import timedelta
import os

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
from models import Base
Base.metadata.create_all(bind=engine)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup: ensure memberships exist for all chats (idempotent)
    try:
        from database import SessionLocal as _SessionLocal
        from models import Chat as _Chat
        from chat_operations import _ensure_user_membership as _ensure
        db = _SessionLocal()
        chats = db.query(_Chat).all()
        for chat in chats:
            _ensure(db, chat.id, chat.creator_id)
            _ensure(db, chat.id, chat.recipient_id)
    except Exception as e:
        print(f"‚ö†Ô∏è Startup membership ensure failed: {e}")
    finally:
        try:
            db.close()
        except Exception:
            pass
    yield

app = FastAPI(
    title="Meduzzen Messenger",
    description="–í–µ–±-–¥–æ–¥–∞—Ç–æ–∫ –º–µ—Å–µ–Ω–¥–∂–µ—Ä –∑ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏ —á–∞—Ç–∞–º–∏ –æ–¥–∏–Ω-–Ω–∞-–æ–¥–∏–Ω",
    version="1.0.0",
    lifespan=lifespan
)

# –î–æ–¥–∞—î–º–æ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.mount("/static", StaticFiles(directory="static"), name="static")

security = HTTPBearer()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è JWT
ACCESS_TOKEN_EXPIRE_MINUTES = 30

@app.post("/register", response_model=UserResponse)
def register(user: UserCreate, db: Session = Depends(get_db)):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    db_user = db.query(User).filter(User.email == user.email).first()
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )
    
    db_user = db.query(User).filter(User.username == user.username).first()
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already taken"
        )
    
    # –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    from passlib.context import CryptContext
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    hashed_password = pwd_context.hash(user.password)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db_user = User(
        username=user.username,
        email=user.email,
        password=hashed_password
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    
    return db_user

@app.post("/login", response_model=Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ email
    user = db.query(User).filter(User.email == form_data.username).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
    from passlib.context import CryptContext
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    if not pwd_context.verify(form_data.password, user.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/logout")
def logout(credentials: HTTPBearer = Depends(security), db: Session = Depends(get_db)):
    """–í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏ (–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫)"""
    add_token_to_blacklist(credentials.credentials, db)
    return {"message": "Successfully logged out"}

@app.get("/users", response_model=list[UserResponse])
def get_users(current_user: User = Depends(get_current_active_user), db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Ç—É)"""
    users = db.query(User).filter(User.id != current_user.id).all()
    return users

@app.get("/me", response_model=UserResponse)
def get_current_user_info(current_user: User = Depends(get_current_active_user)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return current_user

@app.get("/protected")
def protected_route(current_user: User = Depends(get_current_active_user)):
    """–ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    return {
        "message": "This is a protected route",
        "username": current_user.username
    }

# Chat endpoints
@app.post("/chats", response_model=ChatResponse)
def create_chat(chat: ChatCreate, current_user: User = Depends(get_current_active_user), db: Session = Depends(get_db)):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    print(f"üîç API: Creating chat - current_user_id={current_user.id}, recipient_id={chat.recipient_id}")
    try:
        result = create_private_chat(db, current_user.id, chat.recipient_id)
        print(f"üîç API: Chat created - {result}")
        return result
    except Exception as e:
        print(f"‚ùå API: Error creating chat - {e}")
        import traceback
        traceback.print_exc()
        raise

@app.get("/chats", response_model=list[ChatResponse])
def get_chats(current_user: User = Depends(get_current_active_user), db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print(f"üîç API: Getting chats for user {current_user.id}")
    try:
        result = get_user_chats(db, current_user.id)
        print(f"üîç API: Chats found: {[c.id for c in result]}")
        return result
    except Exception as e:
        print(f"‚ùå API: Error getting chats - {e}")
        import traceback
        traceback.print_exc()
        raise

@app.get("/chats/{chat_id}/participants", response_model=list[UserResponse])
def get_chat_participants_endpoint(
    chat_id: int, 
    current_user: User = Depends(get_current_active_user), 
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —É—á–∞—Å–Ω–∏–∫–æ–º —á–∞—Ç—É
    if not is_user_in_chat(db, chat_id, current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You are not a member of this chat"
        )
    
    participants = get_chat_participants(db, chat_id)
    return participants

@app.post("/chats/{chat_id}/messages", response_model=MessageResponse)
def send_message_endpoint(
    chat_id: int,
    message: MessageCreate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç"""
    print(f"üîç API: Sending message to chat {chat_id}, user {current_user.id}")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —É—á–∞—Å–Ω–∏–∫–æ–º —á–∞—Ç—É
    try:
        is_member = is_user_in_chat(db, chat_id, current_user.id)
        print(f"üîç API: User {current_user.id} is member of chat {chat_id}: {is_member}")
        if not is_member:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="You are not a member of this chat"
            )
        
        message_data = message.dict()
        message_data["chat_id"] = chat_id
        result = send_message(db, message_data, current_user.id)
        print(f"üîç API: Message sent successfully: {result.id}")
        return result
    except Exception as e:
        print(f"‚ùå API: Error sending message - {e}")
        import traceback
        traceback.print_exc()
        raise

@app.get("/chats/{chat_id}/messages", response_model=list[MessageResponse])
def get_chat_messages_endpoint(
    chat_id: int,
    skip: int = 0,
    limit: int = 50,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É"""
    print(f"üîç API: Getting messages for chat {chat_id}, user {current_user.id}")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —É—á–∞—Å–Ω–∏–∫–æ–º —á–∞—Ç—É
    try:
        is_member = is_user_in_chat(db, chat_id, current_user.id)
        print(f"üîç API: User {current_user.id} is member of chat {chat_id}: {is_member}")
        if not is_member:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="You are not a member of this chat"
            )
        
        messages = get_chat_messages(db, chat_id, skip, limit)
        print(f"üîç API: Found {len(messages)} messages")
        return messages
    except Exception as e:
        print(f"‚ùå API: Error getting messages - {e}")
        import traceback
        traceback.print_exc()
        raise

@app.put("/messages/{message_id}")
def edit_message_endpoint(
    message_id: int,
    new_content: str = Form(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    return edit_message(db, message_id, new_content, current_user.id)

@app.delete("/messages/{message_id}")
def delete_message_endpoint(
    message_id: int,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (soft delete)"""
    delete_message(db, message_id, current_user.id)
    return {"message": "Message deleted successfully"}

@app.post("/messages/{message_id}/files", response_model=dict)
def upload_file_endpoint(
    message_id: int,
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    # TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –¥–æ —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    attachment = upload_file(db, file, message_id)
    return {
        "message": "File uploaded successfully",
        "file_id": attachment.id,
        "filename": attachment.filename
    }

@app.get("/files/{file_id}")
async def download_file(file_id: int, current_user: User = Depends(get_current_active_user), db: Session = Depends(get_db)):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É (TODO: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏)"""
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    return {"message": "File download not implemented yet"}

@app.get("/")
def read_root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return FileResponse('static/index.html')
    